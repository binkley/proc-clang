#include "proc-gcc.h"

#include <stdarg.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include <sqlca.h>

#include "mock-oracle.h"

typedef struct _record {
    int n_fields;
    data_field_t fields[20];
} record_t;
static int _n_records;
static record_t _records[20];
static int _x_records;

static void _record_1_field(record_t record, data_field_t field) {
    record.fields[record.n_fields] = field;
    ++record.n_fields;
}

static void _record_1_record(record_t record) {
    _records[_n_records] = record;
    ++_n_records;
}

void RESET_DATA() {
    _n_records = 0;
    _x_records = 0;
}

void TEST_DATA(const int n, ...) {
    record_t record = _records[_n_records];
    int i;
    va_list ap;
    va_start(ap, n);
    for (i = 0; i < n; ++i)
        _record_1_field(record, va_arg(ap, data_field_t));
    va_end(ap);
    _record_1_record(record);
}

data_field_t _STRING(const char *s) {
    data_field_t field = { (void *) s, (strlen(s) + 1) };
    return field;
}

data_field_t _FLOAT(const float f) {
    data_field_t field = { (void *) &f, sizeof(f) };
    return field;
}

static void recv_eof(struct sqlexd *sqlstm) {
    sqlca.sqlcode = 1403;
}

static void recv_field(struct sqlexd *sqlstm, record_t record, int n) {
    data_field_t field = record.fields[n];
    memcpy((void *) (sqlstm->sqhstv[n]), field.data, field.len);
}

static void recv_record(struct sqlexd *sqlstm, record_t record) {
    int i;
    for (i = 0; 0 < record.n_fields; ++i)
        recv_field(sqlstm, record, i);
}

void
sqlcxt(void **ignored, unsigned int *sqlctx, struct sqlexd *sqlstm,
        const struct sqlcxp *sqlfpn) {
    if (_n_records == _x_records) {
        recv_eof(sqlstm);
        return;
    }
    record_t record = _records[_x_records++];
    recv_record(sqlstm, record);
}

void
_force_proc_code_generation() {
    char *connect = 0, *username = 0, *password = 0;

    EXEC SQL CONNECT :username IDENTIFIED BY :password
        USING :connect;
}
