#include "proc-gcc.h"

#include <stdarg.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include <stdio.h>

#include <sqlca.h>

#include "mock-oracle.h"

typedef struct _data_record {
    data_field_t *head_field;
    struct _data_record *next;
} data_record_t;

static data_record_t *head_record;
static data_record_t *current_record;

static void
add_field(data_record_t *record, data_field_t *field)
{
    data_field_t *current = record->head_field;
    if (!current)
        record->head_field = field;
    else {
        while (current->next)
            current = current->next;
        current->next = field;
    }
}

static data_record_t *
make_record()
{
    data_record_t *current = head_record;
    if (!current)
        current = head_record
            = (data_record_t *) calloc(1, sizeof(data_record_t));
    else {
        while (current->next)
            current = current->next;
        current = current->next
            = (data_record_t *) calloc(1, sizeof(data_record_t));
    }
    return current;
}

static void
free_fields(data_record_t *record)
{
    data_field_t *current = record->head_field;
    data_field_t *next;
    while (current) {
        next = current->next;
        free(current);
        current = next;
    }
}

static void
free_records()
{
    data_record_t *current = head_record;
    data_record_t *next;
    while (current) {
        free_fields(current);
        next = current->next;
        free(current);
        current = next;
    }
}

void
TEST_DATA(const int n, ...)
{
    data_record_t *record = make_record();
    int i;
    va_list ap;
    va_start(ap, n);
    for (i = 0; i < n; ++i)
        add_field(record, va_arg(ap, data_field_t *));
    va_end(ap);
}

static const data_field_t *
make_field(const void *p, const size_t len)
{
    data_field_t *field = (data_field_t *) calloc(1, sizeof(data_field_t));
    field->len = len;
    field->data = calloc(1, len);
    memcpy(field->data, p, len);
    return field;
}

const data_field_t *
_STRING(const char *s)
{
    return make_field((void *) s, strlen(s) + 1);
}

const data_field_t *
_INT(const int i)
{
    return make_field((void *) &i, sizeof(int));
}

const data_field_t *
_FLOAT(const float f)
{
    return make_field((void *) &f, sizeof(float));
}

static void
recv_eof(const struct sqlexd *sqlstm)
{
    sqlca.sqlcode = 1403;
}

static void
recv_field(void *slot, const data_field_t *field)
{
    memcpy(slot, field->data, field->len);
}

static void
recv_record(struct sqlexd *sqlstm, const data_record_t *record)
{
    int i = 0;
    data_field_t *current = record->head_field;
    while (current) {
        recv_field(sqlstm->sqhstv[i], current);
        ++i;
        current = current->next;
    }
}

void
sqlcxt(void **ignored, unsigned int *sqlctx, struct sqlexd *sqlstm,
        const struct sqlcxp *sqlfpn)
{
    if (0 == sqlstm->arrsiz)
        current_record = head_record;
    else if (!current_record) {
        free_records();
        head_record = 0;
        recv_eof(sqlstm);
    } else {
        recv_record(sqlstm, current_record);
        current_record = current_record->next;
    }
}

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-function"
static void
_force_proc_code_generation()
{
    char *connect = 0, *username = 0, *password = 0;

    EXEC SQL CONNECT :username IDENTIFIED BY :password
        USING :connect;
}
#pragma clang diagnostic pop
