#!/usr/bin/env bash

set -o pipefail
set -o functrace

export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# Pick clang/clang++ based on the name we were invoked by
clang=${0##*/}
clang=${clang/w/}

# Use color output when talking to a terminal as clang does
[[ -t 1 ]] && set -- $clang -fcolor-diagnostics "$@" || set -- $clang "$@"

function filter_diagnostics {
    local -r warnings_line='([1-9][0-9]*) warnings generated\.'
    let warnings=0

    while IFS= read -r line || [[ -n "$line" ]]
    do
        case "$line" in
        *"unused variable 'sqlstm'"* \
            | *"unused variable 'IAPSUCC'"* \
            | *"unused variable 'IAPFAIL'"* \
            | *"unused variable 'IAPFTL'"* )
            read ; read # Skip next 2
            let ++ignored
            ;;
        * ) if ! [[ $line =~ $warnings_line ]]
            then
                printf '%s\n' "$line"
                continue
            fi

            let real_warnings=${BASH_REMATCH[1]}
            let warnings=$((real_warnings - ignored))
            (( 0 == warnings )) && continue
            printf '%s\n' "${line/$real_warnings /$warnings /}"
            ;;
        esac
    done

    return $warnings  # Simulate -Werror
}

# Only diagnostics to to stderr: swap out/err to filter; swap back to print
("$@" 3>&1- 1>&2- 2>&3- | filter_diagnostics) 3>&1- 1>&2 2>&3-
