#!/usr/bin/env bash

export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
# set -x

warnings_line='([1-9][0-9]*) warnings generated\.'

# Pick correctly between `clang` and `clang++`
clang=${0##*/}
clang=${clang/w/}

# Turn on clang color output when talking to a terminal, same behavior
if [[ -t 1 ]]
then
    set -- $clang -fcolor-diagnostics "$@"
else
    set -- $clang "$@"
fi

# Use temp files - process substituion loses the exit code of clang
trap 'rm -f $tmp' EXIT
tmp=$(mktemp 2>/dev/null || mktemp -t ${0##*/})

"$@" >$tmp 2>&1
let clang_exit=$?
if (( 0 != $clang_exit ))
then
    cat $tmp
    exit $clang_exit
fi

let ignored=0
let warnings=0
while IFS= read -r line || [[ -n "$line" ]]
do
    case "$line" in
    *"unused variable 'sqlstm'"* \
        | *"unused variable 'IAPSUCC'"* \
        | *"unused variable 'IAPFAIL'"* \
        | *"unused variable 'IAPFTL'"* )
        read ; read # Skip next 2
        let ++ignored
        ;;
    * ) if [[ $line =~ $warnings_line ]]
        then
            let real_warnings=${BASH_REMATCH[1]}
            let warnings=$((real_warnings - ignored))
            if (( 0 != $warnings ))
            then
                printf '%s\n' "${line/$real_warnings/$warnings}"
            fi
        else
            printf '%s\n' "$line"
        fi
        ;;
    esac
done <$tmp

exit $warnings  # Simulate -Werror
